<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="https://www.lytzen.name/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.lytzen.name/" rel="alternate" type="text/html" /><updated>2019-12-07T09:29:21+00:00</updated><id>https://www.lytzen.name/</id><title type="html">Frans’ Randomness</title><subtitle>My very infrequent thoughts on the world of software development</subtitle><entry><title type="html">Azure Key Vault Secrets</title><link href="https://www.lytzen.name/2019/12/07/azure-keyvault-secrets.html" rel="alternate" type="text/html" title="Azure Key Vault Secrets" /><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><id>https://www.lytzen.name/2019/12/07/azure-keyvault-secrets</id><content type="html" xml:base="https://www.lytzen.name/2019/12/07/azure-keyvault-secrets.html">&lt;p&gt;&lt;a href=&quot;https://azureadventcalendar.com/&quot;&gt;Azure Advent Calendar 2019&lt;/a&gt; is a great initiative to generate and share a bunch of Azure content.
I was fortunate enough to be able to create a video about Azure Key Vault for the Advent Calendar. Specifically, this video focuses on storing &lt;em&gt;secrets&lt;/em&gt; in Azure Key Vault.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SIA3pleuqfQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Please check out all the &lt;a href=&quot;https://www.youtube.com/channel/UCJL9wCcmeMBbah4J0uOWIPg&quot;&gt;other great content and subscribe to the channel&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content&lt;/h1&gt;
&lt;p&gt;The broad outline of the video is as follows:&lt;/p&gt;

&lt;h2 id=&quot;what-is-azure-key-vault&quot;&gt;What is Azure Key Vault?&lt;/h2&gt;
&lt;p&gt;Azure Key Vault provides the following, quite separate, areas of functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Secrets: Safe place to store passwords and other secrets&lt;/li&gt;
  &lt;li&gt;Keys / Cryptography: Public/Private key encryption&lt;/li&gt;
  &lt;li&gt;Certificate Store: Safe place to store X509 certificates&lt;/li&gt;
  &lt;li&gt;Storage Account key rotation: Essentially a wrapper around “Secrets” to help you manage and rotate you Azure Storage Account keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;azure-key-vault-secrets&quot;&gt;Azure Key Vault Secrets&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Store and retrieve secrets&lt;/li&gt;
  &lt;li&gt;Fine-grained access control
    &lt;ul&gt;
      &lt;li&gt;For example, write-only access to a user, read-only access to an app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auth is easy with Managed Identity&lt;/li&gt;
  &lt;li&gt;Store multiple versions with stop/start dates etc
    &lt;ul&gt;
      &lt;li&gt;The dates are advisory and your code has to decide whether to read and use them&lt;/li&gt;
      &lt;li&gt;Uniquely reference specific versions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;before-you-start-with-the-examples&quot;&gt;Before you start with the examples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;Install the Azure CLI &lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Note: I use the PowerShell line continuation character below - if you run this in bash you need to change that&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az login
az account set --subscription xxxx
az configure --defaults location=westeurope group=fl-test-keyvault
az group create --name fl-test-keyvault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-key-vault&quot;&gt;Create a Key Vault&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az keyvault create --name fl-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;give-read-and-write-permissions-to-a-user&quot;&gt;Give read and write permissions to a user&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az keyvault set-policy `
    --name fl-test `
    --upn &quot;flytzen@neworbit.co.uk&quot; `
    --secret-permissions get, list, set  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the real world, a consuming application should not have “set” and an admin shouldn’t have get&lt;/p&gt;

&lt;h2 id=&quot;add-a-secret&quot;&gt;Add a secret&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You can do this in the portal as well - and in code of course&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az keyvault secret set `
    --name supersecretpassword `
    --vault-name fl-test `
    --value ohmyworditssosecret `
    --not-before 2019-12-03T14:30:25z `
    --expires 2019-12-24T23:59:59z `
    --disabled false `
    --output table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the “disabled” flag is enforced; most operations are blocked on a disabled secret.
However, the nbf and expiry are for information and it’s up to you to read them and act on them
This is &lt;em&gt;different&lt;/em&gt; for keys!&lt;/p&gt;

&lt;h2 id=&quot;set-up-a-console-app-to-read-the-secret&quot;&gt;Set up a console app to read the secret&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: New packages have just come out but they have &lt;a href=&quot;https://github.com/Azure/azure-sdk-for-net/issues/8934&quot;&gt;less intuitive auth&lt;/a&gt; - for now&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new console -n ShowSecrets 
cd ShowSecrets 
dotnet add package Microsoft.Azure.KeyVault
dotnet add package Microsoft.Azure.Services.AppAuthentication
code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fields&quot;&gt;Fields&lt;/h2&gt;
&lt;p&gt;Add the following to the top of the Main class:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://fl-test.vault.azure.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supersecretname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;supersecretpassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;simple-program-to-retrieve-secret&quot;&gt;Simple program to retrieve secret&lt;/h2&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AzureServiceTokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AuthenticationCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyVaultTokenCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSecretAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyVaultUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supersecretname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;change-the-secret-in-the-cli&quot;&gt;Change the secret in the CLI&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az keyvault secret set `
    --name supersecretpassword `
    --vault-name fl-test `
    --value OXFORD `
    --not-before 2019-12-24T14:30:25z `
    --expires 2019-12-31T23:59:59z `
    --disabled false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;see-all-the-versions&quot;&gt;See all the versions&lt;/h2&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AzureServiceTokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AuthenticationCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyVaultTokenCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretVersions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSecretVersionsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyVaultUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supersecretname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretVersions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretVersionValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSecretAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretVersionValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;try-it-in-aspnet-core&quot;&gt;Try it in ASP.Net Core&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new mvc
dotnet add package Microsoft.Azure.KeyVault
dotnet add package Microsoft.Azure.Services.AppAuthentication
dotnet add package Microsoft.Extensions.Configuration.AzureKeyVault
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;program.cs&lt;/code&gt; change:&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureWebHostDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;webBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseStartup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureAppConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAzureKeyVault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fl-test.vault.azure.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyVaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AuthenticationCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AzureServiceTokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyVaultTokenCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultKeyVaultSecretManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Home/index.cshtml&lt;/code&gt; add:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
   string myPassword = Configuration[&quot;supersecretpassword&quot;];
}

&amp;lt;h2&amp;gt;Retrieved from Key Vault:&amp;lt;/h2&amp;gt;
&amp;lt;h1&amp;gt;@myPassword&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: Directly injecting and using config in the view like this is a &lt;strong&gt;bad&lt;/strong&gt; idea. Don’t do this in the real world please.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;do-it-on-azure&quot;&gt;Do it on Azure&lt;/h1&gt;
&lt;p&gt;This part is more about deploying to Azure and setting up Managed Identity&lt;/p&gt;

&lt;h2 id=&quot;set-up-git-on-the-repository-to-make-it-easy&quot;&gt;Set up git on the repository to make it easy&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init 
echo &quot;bin/&quot; | out-file .gitignore -encoding utf8 
echo &quot;obj/&quot; | out-file .gitignore -encoding utf8 -append 
git add -A
git commit -m &quot;Initial commit&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-web-app-slot&quot;&gt;Create a web app slot&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: this won’t work in PowerShell because of the pipe symbol in “DOTNETCORE|3.0”! You need to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;webapp create&lt;/code&gt; command in a command prompt or bash&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az appservice plan create --name fl-test-keyvault-secrets --sku S1 --is-linux  -o json
az webapp create --name fl-test-keyvault-secrets --plan fl-test-keyvault-secrets --runtime &quot;DOTNETCORE|3.0&quot; --deployment-local-git -o json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enable-managed-identity-and-give-it-access-to-the-key-vault&quot;&gt;Enable Managed Identity and give it access to the key vault&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az webapp identity assign --name fl-test-keyvault-secrets

az keyvault set-policy `
    --name fl-test `
    --object-id f0e46c32-3492-407c-b31f-3e137e378ea7 `
    --secret-permissions get, list  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-azure-as-a-git-remote-so-we-can-push-to-it&quot;&gt;Add azure as a git remote so we can push to it&lt;/h2&gt;
&lt;p&gt;The first line gets the publishing username and password for this webapp, which you’ll be prompted for when you &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az webapp deployment list-publishing-credentials --name fl-test-keyvault-secrets -o json
git remote add azure https://fl-test-keyvault-secrets.scm.azurewebsites.net/fl-test-keyvault-secrets.git
git push -u azure master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;check-the-result&quot;&gt;Check the result&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az webapp browse --name fl-test-keyvault-secrets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://azureadventcalendar.com/&quot;&gt;&lt;img src=&quot;/assets/Advent-Calendar7.jpg&quot; alt=&quot;Azure Advent Calendar logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Azure" /><category term="Security" /><summary type="html">Use Azure Key Vault to safely store secrets and passwords in Azure</summary></entry><entry><title type="html">Secure your Web App in Azure at DDD14</title><link href="https://www.lytzen.name/2019/10/16/secure-your-webapp-in-azure-at-ddd14.html" rel="alternate" type="text/html" title="Secure your Web App in Azure at DDD14" /><published>2019-10-16T00:00:00+01:00</published><updated>2019-10-16T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/10/16/secure-your-webapp-in-azure-at-ddd14</id><content type="html" xml:base="https://www.lytzen.name/2019/10/16/secure-your-webapp-in-azure-at-ddd14.html">&lt;p&gt;I had the great pleasure of giving an updated version of my &lt;a href=&quot;/talks/Securing_web_apps_in_azure.html&quot;&gt;“Secure your Web App in Azure” talk&lt;/a&gt; talk at &lt;a href=&quot;https://developerdeveloperdeveloper.com/&quot;&gt;Developer Developer Developer 14&lt;/a&gt; in Reading on 12 October 2019.&lt;/p&gt;

&lt;p&gt;A video of the whole talk is available below.&lt;/p&gt;

&lt;p&gt;I touch on a whole range of Azure technologies, but mostly I introduce and expand on a simple framework to think about and manage your exposure.&lt;/p&gt;

&lt;h2 id=&quot;example-of-exposure-and-mitigation&quot;&gt;Example of exposure and mitigation&lt;/h2&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;External Actors&lt;/th&gt;
    &lt;th&gt;Internal Actors&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;th&gt;PREVENT&lt;/th&gt;
    &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Secure your code – see Troy Hunt’s courses as a starting point.
            &lt;/li&gt;
            &lt;li&gt;
                Lock down your servers
            &lt;/li&gt;
            &lt;li&gt;
                Use Firewalls and Intrusion Detection/Prevention Systems
            &lt;/li&gt;
            &lt;li&gt;
                Encrypt everything in transit
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
    &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Protect your passwords/secrets
            &lt;/li&gt;
            &lt;li&gt;
                Process for granting and removing access
            &lt;/li&gt;
            &lt;li&gt;
                Use Azure AD for all access, including SQL
            &lt;/li&gt;
            &lt;li&gt;
                Audit who has access on a regular basis and remove unnecessary access
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;th&gt;DETECT&lt;/th&gt;
    &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Log and alert on any unusual application activity
                &lt;ul&gt;
                    &lt;li&gt;
                        403s and 404s
                    &lt;/li&gt;
                    &lt;li&gt;
                        Failed logins
                    &lt;/li&gt;
                    &lt;li&gt;
                        High CPU/memory, increased load
                    &lt;/li&gt;
                    &lt;li&gt;
                        Etc
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
                Use Advanced Threat Protection
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
    &lt;td&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Log and alert on all access to the backend by internal users
            &lt;/li&gt;
            &lt;li&gt;
                Log and alert on unusual access patterns by application users
            &lt;/li&gt;
            &lt;li&gt;
                Consider DLP tools
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;th&gt;MITIGATE&lt;/th&gt;
    &lt;td colspan=&quot;2&quot;&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Encrypt sensitive data at the application layer
            &lt;/li&gt;
            &lt;li&gt;
                Have ways of locking out certain users or IP addresses
            &lt;/li&gt;
            &lt;li&gt;
                For very sensitive systems, consider multi-layered architectures to contain breaches
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/td&gt;
    
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;video-of-the-whole-talk&quot;&gt;Video of the whole talk&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HZgjlTi7OiA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;View the slides on Slide Share:&lt;/p&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/DbJSjU5lVqZNUN&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/FransLytzen/secure-your-azure-web-app-2019&quot; title=&quot;Secure your Azure Web App 2019&quot; target=&quot;_blank&quot;&gt;Secure your Azure Web App 2019&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/FransLytzen&quot; target=&quot;_blank&quot;&gt;Frans Lytzen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;p&gt;… or download from &lt;a href=&quot;https://github.com/flytzen/SecurityTalk/blob/master/Secure%20Your%20Web%20App%20Presentation.pptx?raw=true&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Azure" /><category term="SQL" /><category term="Security" /><category term="Web" /><summary type="html">An overview of how to secure Azure Web Apps, touching on virtual networks, encryption, key vault and monitoring.</summary></entry><entry><title type="html">Can a SHA256 Hash have a “/” in it?</title><link href="https://www.lytzen.name/2019/09/25/can-a-hash-have-a-slash.html" rel="alternate" type="text/html" title="Can a SHA256 Hash have a &quot;/&quot; in it?" /><published>2019-09-25T00:00:00+01:00</published><updated>2019-09-25T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/09/25/can-a-hash-have-a-slash</id><content type="html" xml:base="https://www.lytzen.name/2019/09/25/can-a-hash-have-a-slash.html">&lt;p&gt;I was recently asked whether a SHA256 hash could have a “/” in it. If you know how hashes work, you probably know that the question doesn’t make sense. But I thought it was a good reason to write a bit about how hashes work and, specifically, how they manifest in our coding. Personally, I’ve been doing this for a long time and some of the details were rather opaque to me until recently.&lt;/p&gt;

&lt;p&gt;The short answer is that the “/” question comes about because we usually base64 encode hashes, because they are represented as byte arrays, because they are large numbers - meaning that the question really is “how do I avoid ‘/’ in base64 encoding”.&lt;/p&gt;

&lt;p&gt;Let’s peel back the layers of the onion.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-hash-and-why-do-i-want-one&quot;&gt;What is a hash and why do I want one?&lt;/h1&gt;
&lt;p&gt;The idea with a &lt;em&gt;hash&lt;/em&gt; is that you can take some input (often text, but it doesn’t have to be) and then calculate a &lt;em&gt;hash&lt;/em&gt; from it.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The hash always has the same length (the length depends on which algorithm you use).&lt;/li&gt;
  &lt;li&gt;If you hash the same input again, you will always get the same result.&lt;/li&gt;
  &lt;li&gt;It is impossible to deduce the input from the hash.&lt;/li&gt;
  &lt;li&gt;Good hashes have low &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2010/03/22/socks-birthdays-and-hash-collisions/&quot;&gt;“collision” rates&lt;/a&gt;, meaning that the output hashes are widely spread across the possible values, making it unlikely that two different inputs will produce the same output (but not impossible as the hash is shorter than the input).&lt;/li&gt;
  &lt;li&gt;A small change to the input should produce a completely different hash.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;password-hashing&quot;&gt;Password hashing&lt;/h2&gt;
&lt;p&gt;You have probably heard about hashing passwords instead of storing them. The idea here is that when the user sets up a password, you hash it and then store the hash in the database. When the user tries to log in, you take the value they enter, hash it and check if the hash matches the stored hash. If they do, it is overwhelmingly likely that they entered the correct password. But, if an attacker steals your database, they won’t be able to deduce the passwords from the hash, which is useful because people tend to re-use passwords across sites.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is a very short explanation and ignores such things as salting, brute force, iterations and rainbow tables. Do &lt;strong&gt;not&lt;/strong&gt; implement password hashing based on what I write here, there is a lot more to it!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;message-authentication-codes-mac-or-hmac&quot;&gt;Message Authentication Codes (MAC or HMAC)&lt;/h2&gt;
&lt;p&gt;A very cool application of hashes is using it to make messages or other packages of data tamper proof.&lt;br /&gt;
Let’s imagine you need to put a message on a queue to process an order. The message could include a product ID and a price. What if someone could intercept that message in transit and change the price?&lt;br /&gt;
What you can do is concatenate all the information in the message and then create a &lt;em&gt;hash&lt;/em&gt; from it and include that hash in the message. The receiver can then do the same hashing and compare the resulting hash to make sure the message has not been modified in transit. This can be used in all sorts of situations, including when you round-trip data to a browser and want to make sure no-one is messing with it.
Of course, hash algorithms are public so you need to make sure the attacker can’t just re-create the hash. There are some popular approaches, depending on your situation;&lt;/p&gt;

&lt;h3 id=&quot;shared-secret&quot;&gt;Shared Secret&lt;/h3&gt;
&lt;p&gt;If you are sending data to your own system, i.e. on a message queue or round-tripping some data to a browser etc, you would usually add a &lt;em&gt;secret&lt;/em&gt; (think password) to the concatenated data before you create the hash. An attacker won’t know the secret, so can’t re-create the hash.&lt;br /&gt;
The recipient re-creates the hash in the same way you did, using the same secret, and compares the hashes to make sure they are the same.&lt;/p&gt;

&lt;h3 id=&quot;publicprivate-key-cryptography&quot;&gt;Public/Private key cryptography&lt;/h3&gt;
&lt;p&gt;If you are sending data between two parties, it is more common to use public/private key cryptography to &lt;em&gt;sign&lt;/em&gt; the message. In this case, you create a hash from the concatenated data and then you &lt;em&gt;encrypt&lt;/em&gt; the hash with your &lt;em&gt;private&lt;/em&gt; key and include the result with the message.&lt;br /&gt;
The recipient will create the hash in the same way you did. They will then &lt;em&gt;decrypt&lt;/em&gt; the hash you sent using your &lt;em&gt;public&lt;/em&gt; key and check they match.&lt;/p&gt;

&lt;h1 id=&quot;so-whats-with-that-string-and-the-&quot;&gt;So what’s with that string and the “/”?&lt;/h1&gt;
&lt;p&gt;When you generate a hash in code, you will get a &lt;em&gt;byte array&lt;/em&gt; - not a string. In order to store the hash in a database and send it over HTTP etc, you will usually base64 encode it; If you aren’t familiar with it, “base64” is a mechanism for turning binary data into strings for the purpose of transmission and storage.&lt;/p&gt;

&lt;p&gt;It turns out that, by default, base64 may produce “/” in it’s output and that can be problematic in some scenarios, such as when including it in URLs.&lt;/p&gt;

&lt;p&gt;So, can a SHA256 Hash include a “/”? No - but the base64 representation of &lt;em&gt;any&lt;/em&gt; hash might. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Wikipedia&lt;/a&gt; for a deeper discussion of base64 and see the “URL Applications” section for some tips on how to modify base64 to make it safe in URLs.&lt;/p&gt;

&lt;h1 id=&quot;why-is-the-hash-a-byte-array-anyway&quot;&gt;Why is the hash a byte array anyway?&lt;/h1&gt;
&lt;p&gt;When I think about a byte array I think about video files and other binary data so I struggled to understand why the hash algorithms insist on returning byte arrays. I mean, why can’t it just give me a string?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s because a hash algorithm doesn’t actually produce a byte array at all.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hash algorithms produce a very large &lt;em&gt;number&lt;/em&gt;. For example the SHA1 algorithm produces a 160-bit number; That means it takes 160 0s and 1s to write it. In base 10 it would take about 48 digits to write it out. SHA256 produces a 256 bit number, SHA512 a 512 bit number and so on.&lt;br /&gt;
Our programming languages don’t generally have built-in types that can represent numbers that large, so the 256 bits are simply chopped into 8-bit chunks and presented to you as a byte array because there is no other easy way to do it - but you should really think about it as a single number with 256 binary digits.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="C#" /><category term="Technology" /><summary type="html">I was recently asked whether a SHA256 hash could have a &quot;/&quot; in it. If you know how hashes work, you probably know that the question doesn't make sense. But I thought it was a good reason to write a bit about how hashes work and, specifically, how they manifest in our coding. Personally, I've been doing this for a long time and some of the details were rather opaque to me until recently.</summary></entry><entry><title type="html">AI will fundamentally change how we build software</title><link href="https://www.lytzen.name/2019/08/14/ai-will-fundamentally-change-software.html" rel="alternate" type="text/html" title="AI will fundamentally change how we build software" /><published>2019-08-14T00:00:00+01:00</published><updated>2019-08-14T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/08/14/ai-will-fundamentally-change-software</id><content type="html" xml:base="https://www.lytzen.name/2019/08/14/ai-will-fundamentally-change-software.html">&lt;p&gt;Artificial Intelligence/Machine Learning/bots are set to fundamentally change how we design and build software - even how we think about the problems we create software to solve.&lt;/p&gt;

&lt;p&gt;I believe it’s a revolution on par with the move to web and I think many people working in the industry are yet to fully realise this. If you are a business analyst, architect, developer or even a business process specialist, your world is about to be turned upside down and you will have to learn a completely new skill-set or face becoming increasingly irrelevant.&lt;/p&gt;

&lt;p&gt;You are quite likely to think I am being alarmist and you may want to dismiss what I’m saying. These could be some of the things you want to tell yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A business process is a business process. &lt;br /&gt;
&lt;em&gt;No, it’s not. AI allows many business process to be completely re-defined or eliminated.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I still need to build - and know how to build - all the resilience, scale, micro services, databases and so on, all that AI stuff doesn’t remove the need for that.&lt;br /&gt;
&lt;em&gt;True - but it’s no longer enough and you may find yourself being really good at solving the wrong problem.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Real people don’t want to [make some change you can’t imagine should change].&lt;br /&gt;
&lt;em&gt;Except, people do change - and more and more rapidly&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like to think of this as more of an opportunity than a threat. But, it does require you to accept you are going to be a beginner again, for a while, allow yourself to learn and to challenge everything you already know. I am on this journey myself and I don’t know the answers yet - but I am enjoying exploring.&lt;/p&gt;

&lt;p&gt;Note: I am talking somewhat interchangeably about Artificial Intelligence, Machine Learning and bots. They are not the same and I am not even going to try to get the categories right, because that is not the point of this post; I am just going to talk about the impact “all of that stuff” could have on how we build software.&lt;/p&gt;

&lt;h1 id=&quot;automating-routine-tasks&quot;&gt;Automating routine tasks&lt;/h1&gt;
&lt;p&gt;The most obvious thing that springs to mind when you talk about things like Machine Learning is to automate routine tasks. The ubiquitous example is image recognition such as recognising hand writing or categorising pictures of animals into species.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/deep-learning-for-image-classification-why-its-challenging-where-we-ve-been-and-what-s-next-93b56948fcef&quot;&gt;&lt;img src=&quot;/assets/ClassifyPictures.png&quot; alt=&quot;Picure of photos classified into animal species&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe more relevant to people likely to read this post is things like assessing the contents of online forms to decide on actions.&lt;br /&gt;
For example, today you may have people submitting an annual health survey and have a health practitioner review these questionnaires to assess who is fine, who should receive a phone call, who should have a face-to-face visit and so on. You &lt;em&gt;can&lt;/em&gt; automate that today using hard-coded rules, but it’s probably a lot easier to analyse what the health practitioner actually decides and then train a Machine Learning model on that data.&lt;/p&gt;

&lt;p&gt;In practical teams, there are a few things you can do now to start this journey;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Understand that it’s not about getting to 100% accuracy. In most cases, Machine Learning models will spit out a &lt;strong&gt;probability&lt;/strong&gt; so you can put a rule in to say that when that probability is less than, say, 90% then this thing is referred to a human being for assessment. &lt;br /&gt;
This data can then be used to further refine the model, making it ever more accurate (you should also randomly refer some high-probability cases to a human on an ongoing basis to check and adjust the model over time).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think about setting your software up so you can start gathering the data; without a training set, you can’t train the model in the first place. So build the system so 100% of cases go to a human for now and design it so the &lt;em&gt;decision&lt;/em&gt; is clearly recorded along with the original input. &lt;br /&gt;
That thing about recording the decision clearly is very often overlooked when you are just focused on the process and you are not thinking about the future potential for using Machine Learning.
Once you have had some data through, you can start training a model - and the UI you built stays relevant for dealing with the edge cases.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;understanding-what-is-normal&quot;&gt;Understanding what is normal&lt;/h1&gt;
&lt;p&gt;A much more subtle - and potentially pervasive - application is when a system starts to learn what’s “normal” and start to react on its own when things are “not normal”.&lt;/p&gt;

&lt;p&gt;One of the best examples at the moment is &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview&quot;&gt;Azure Application Insights&lt;/a&gt;. When you add App Insights to your system, it starts recording a lot of information, including requests, dependency calls, errors etc. You can, of course, view this in the traditional way but App Insights will also use Machine Learning to automatically build up a baseline of what’s normal and alert you when something is not normal.&lt;br /&gt;
For example, you may get an alert saying “between 10:03 and 10:07 5% of calls to [some dependency] failed - normally only 1% fail”. Or similar alerts for duration or request volume etc. The key thing here is that you do not need to set up any special rules to get these alerts, the machine learning model figures it out on its own.
&lt;img src=&quot;/assets/AppInsightsAutoDetection.png&quot; alt=&quot;Example alert from Application Insights&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure also has similar things for security, threat detection and logins, where they establish a baseline for “normal” and alert you to unusual things.&lt;/p&gt;

&lt;p&gt;You can use this approach in many different ways in your own software. For example, a known indicator of stress is if someone all of a sudden starts working a lot more hours. So you could use Machine Learning to automatically establish a baseline for “normal” hours &lt;em&gt;for each individual&lt;/em&gt; in your company (assuming they record timesheets) and flag it up to their manager if all of a sudden their patterns change, giving you a chance to intervene early before a wider mental health issue develops. There are standard tools out there to help you with that, including &lt;a href=&quot;https://azure.microsoft.com/en-gb/services/cognitive-services/anomaly-detector/&quot;&gt;Azure’s Anomaly Detector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you are designing systems, these kind of technologies need to be in your mind. Do you rely on someone manually checking for deviations or do you have alerts or hard-coded rules to detect anomalies?&lt;/p&gt;

&lt;h1 id=&quot;make-suggestions-and-correct-errors&quot;&gt;Make suggestions and correct errors&lt;/h1&gt;
&lt;p&gt;When you receive a text message on your phone or an IM on LinkedIn, you will often be given some suggested answers; These are based on Machine Learning to analyse what the message sent to you was about and what people normally respond with in similar situations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/LinkedInIM.jpg&quot; alt=&quot;Example of LinkedIn suggesting replies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may have similar things in a UI where, for example, the system learns over time what kind and level of expenses a person normally records and alerts them if they enter something that is unusual for them. These are not system-wide rules, simply knowing that it’s normal for a particular individual to claim £50 for train tickets, but not £500. Or maybe that when you record mileage, more often than not it’s to a particular location so it can auto-suggest the description and distance.&lt;/p&gt;

&lt;p&gt;The list of examples get longer the more you allow yourself to think about it, starting with detecting deviations from normal to understanding what you probably meant and suggesting that. &lt;a href=&quot;https://www.autodraw.com/&quot;&gt;Google’s Autodraw experiment&lt;/a&gt; is an amazing example of this.&lt;/p&gt;

&lt;p&gt;When you are thinking about both UX and business processes - these kind of technologies need to be in your mind. Are there places where users make mistakes and we can help them not to? Are there whole new categories of problems we simply haven’t been able to solve before?
One thing’s for sure, this is becoming the new normal so you need to incorporate it in your design thinking.&lt;/p&gt;

&lt;h1 id=&quot;intent-driven-ui&quot;&gt;Intent driven UI&lt;/h1&gt;
&lt;p&gt;I think this is probably the most challenging and different area. 
It’s always been the case that good UX starts with &lt;em&gt;intent&lt;/em&gt;. You need to know what the user wants to achieve and then design the UX to make it easy to get there. With things like bots, we now often use natural language processing to derive intent from normal speech. I see many/most software interfaces for &lt;em&gt;occasional&lt;/em&gt; users needing to adopt this kind of conversational UI. But AI is not magic and making this work well is really hard.&lt;/p&gt;

&lt;p&gt;Let me use an example to illustrate what I mean.&lt;/p&gt;

&lt;p&gt;When you want to book a holiday you can probably describe it really easily to another person. Maybe “I just need to get away for a week, somewhere quiet where the kids have stuff to do. Just to get some rest and not have to think too much. It must not be too expensive, but it does need to be of a decent quality”. If you said that to an experienced travel agent, they may ask you a few follow-up questions, and would then quickly be able to suggest a few options for you. How you respond to those options (too hot, too far) would help them to better understand your needs and they would refine their suggestions. In the end, they would probably give you a list of only a handful of suggestions, even if there may be 100 trips that match your criteria because &lt;a href=&quot;https://www.amazon.com/Paradox-Choice-Barry-Schwartz/dp/0062449923/ref=cm_cr_arp_d_product_top?ie=UTF8&quot;&gt;choice is overrated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now imagine doing that same journey on most travel booking sites that exists today. You will be given a plethora of filters and tick-boxes so you can review every holiday option going. Except, you don’t know what half the options really mean except you know that to go somewhere quiet you need to &lt;em&gt;not&lt;/em&gt; select any of the ones that say “great night-life” or “18-30 special”. It usually ends up being an exhaustive and often frustrating journey through a bunch of options, comparing and contrasting with a lot of swearing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/HolidayBooking.jpg&quot; alt=&quot;Example of a travel booking site&quot; /&gt;
(&lt;em&gt;I do like Crystal’s site that I stole this picture from - I think it’s one of the better ones out there, but it illustrates the point nicely. Hope they will forgive me.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;With a more conversational UI and Machine Learning techniques, that journey could be much more like talking to an operator. Understand me right, building that system is &lt;strong&gt;hard&lt;/strong&gt;; current Artificial Intelligence is not magic and cannot “think” in any meaningful way. Underneath the covers, that nice conversation with the user still has to be translated into those same tick-boxes, so you can show them filtered results. Natural Language Processing can &lt;em&gt;help&lt;/em&gt; - but you need to identify all the intents yourself. This is not trivial but I truly believe this is where software design for occasional users is going. I believe we may see a (temporary) upsurge in slightly more hybrid solutions where artificial intelligence techniques are used but with operators being pulled in when the AI does not know what to do. However, the data gathered during those interactions will feed back into the AI model and the need for operator intervention will taper off.&lt;/p&gt;

&lt;p&gt;Is the technology and the patterns there to build the dream travel booking site I describe here yet? Probably not. But it’s coming and you should start thinking about how you can start gathering the data to train those models; what can you do today to capture information about how your users express their intent?&lt;/p&gt;

&lt;p&gt;In this example, what about the travel agent - should they talk to an AI as well? I don’t &lt;em&gt;think&lt;/em&gt; so. After all, we are trying to model the AI on an experienced travel agent and it would probably be counter-productive to have the travel agent interfacing with an inferior emulation of themselves. In other words, there is very much still a place for complicated user interfaces with lots of options for the users who use your system every day - but casual users are going to expect something different.&lt;/p&gt;

&lt;p&gt;In practice this isn’t just for complicated things like travel agent bookings; it could be as simple as a customer wanting to buy a widget from your online store. At the same time, don’t forget that sometimes a user does want to have all the information and not just a part of it, so model that intent into your considerations as well (okay, I am drifting towards general UX design here, sorry).&lt;/p&gt;

&lt;p&gt;Building conversational UIs that actually work is really hard - but it is getting easier every day and it will start to become an expectation for more and more people. Just think about how we engage with our various digital assistants. Even the humble Google Search is a lot more than just a “search”, you can ask it to translate things or do math amongst many other things.&lt;/p&gt;

&lt;p&gt;When will your customers begin to expect that they can just log in to your portal and ask a question like “when will my t-shirt arrive”, rather than having to click on their account, list their orders, click on the right one and go through to “tracking”?&lt;/p&gt;

&lt;h1 id=&quot;re-imagining-problems-fundamentally&quot;&gt;Re-imagining problems fundamentally&lt;/h1&gt;
&lt;p&gt;All the above has really been about how we change existing types of software and problems to take advantage of AI to make it better or more efficient. For most of us, that is probably the primary thing we need to worry about because that &lt;strong&gt;isn’t going away anytime soon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But there is also another whole class of problems that we can start to solve that simply wasn’t possible before.&lt;/p&gt;

&lt;p&gt;I recently spoke to &lt;a href=&quot;https://www.saladmoney.co.uk/&quot;&gt;Salad Money&lt;/a&gt;, a Social Enterprise that provide small, short-term loans. They use Open Banking and have fully automated their loan approval process, making it possible to provide these small, cheap loans cost-effectively and at scale. As they build up more data, they will be able to use Machine Learning to provide more tailored products to individuals, without having complicated or unfair assessment processes.&lt;/p&gt;

&lt;p&gt;This general ability to take what used to be quite complicated things that required expert involvement, automate it and deploy it at scale is something I, personally, am quite excited about and I think we will see a lot of innovation in that space.&lt;/p&gt;

&lt;h1 id=&quot;so-what-do-i-do-now&quot;&gt;So what do I do now?&lt;/h1&gt;
&lt;p&gt;I am on the journey myself, I don’t know the answers. 
I spent quite a long time over the last few years trying to get my head into how it all really works and I bought several books on the subject because that’s how I have always approached learning new technical topics. But most of the books very quickly descend into deep math and most seem intended to help you design Machine Learning algorithms - which is probably not what you want.&lt;/p&gt;

&lt;p&gt;Eventually I had a re-think and I decided on a smarter goal for my learning, at least for now:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to be able to recognise where AI technologies can potentially help or change how I design software&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That may sound obvious, but I don’t think I have internalised AI enough that I can (yet) instinctively recognise where I should think about AI. 
That is obviously the first step, because once I identify these opportunities, I can then target my learning at something much more specific and/or hire help.&lt;/p&gt;

&lt;p&gt;The best way I can achieve that is by seeing as many examples as I can. That means going to events, reading blog posts and watching videos. I do like to see how these things are put together, but that’s not the real purpose yet. I just want to load my brain up with examples so I can start to see the patterns of what is possible and start recognising the situations where I, too, should apply AI.&lt;/p&gt;

&lt;p&gt;As a secondary goal, I also want to learn enough about the practical realities that I can at least do a proof-of-concept in order to show that there could be value.&lt;br /&gt;
For example, I have identified some client scenarios that can benefit from automating classification as described above. I can use high-level tools, such as &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MLNET.07&quot;&gt;ML.Nets Model Builder&lt;/a&gt; to do a proof-of-concept without understanding the difference between a Bayes Classifier and a Logistic Regression algorithm, knowing how to do hyperparameter tuning or even clean my data that much. Would I put the result into production? Of course not. But if I can show a model that has 80% accuracy after tinkering for a couple of hours, I can create the business case for engaging a data scientist to build the real thing. And yes, I am learning how to use &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter Notebooks&lt;/a&gt; and all that as well, but the truth is that I don’t actually need the grown-up tools yet.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://neworbit.co.uk&quot;&gt;NewOrbit&lt;/a&gt; we are actively embracing this journey. We are working on training programs for everyone from sales, through business analysts to developers so they can help our customers take advantage of this revolution in software design. We are also building some of our own products in order to test our skills and showcase what’s possible (and to have a bit of fun along the way).&lt;/p&gt;

&lt;p&gt;Are you learning AI? Do you think this will affect software design as much as I do? Leave a comment with your views or contact me on &lt;a href=&quot;https://twitter.com/flytzen&quot;&gt;Twitter&lt;/a&gt; - I’d love to hear what you think.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Technology" /><category term="AI" /><category term="Azure" /><summary type="html">AI will change how we think about, design and build software. It's a revolution on par with the move to web.</summary></entry><entry><title type="html">Azure Security Talk at rg-dev</title><link href="https://www.lytzen.name/2019/05/28/azure-security-at-rg-dev.html" rel="alternate" type="text/html" title="Azure Security Talk at rg-dev" /><published>2019-05-28T00:00:00+01:00</published><updated>2019-05-28T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/05/28/azure-security-at-rg-dev</id><content type="html" xml:base="https://www.lytzen.name/2019/05/28/azure-security-at-rg-dev.html">&lt;p&gt;I had the pleasure of doing a presentation on &lt;a href=&quot;/talks/Securing_web_apps_in_azure&quot;&gt;Securing Web Apps in Azure&lt;/a&gt; at &lt;a href=&quot;https://www.meetup.com/rg-dev/events/253406007/&quot;&gt;rg-dev #29&lt;/a&gt; in Rzeszow, Poland on 24 May 2019. 
I was really impressed by how well organised the event was and just how dedicated and professional the audience were. We are talking about people giving up their Friday night to hear about security in Azure as well as &lt;a href=&quot;https://twitter.com/ptrstpp950&quot;&gt;Piotr Stapp&lt;/a&gt;’s talk about migrating &lt;a href=&quot;https://dotnetomaniak.pl/&quot;&gt;https://dotnetomaniak.pl/&lt;/a&gt; to Azure.&lt;br /&gt;
Apparently this was the first ever talk done in English at rg-dev, but that didn’t feel like a barrier at all.&lt;/p&gt;

&lt;p&gt;I go to Rzeszow quite frequently these days as NewOrbit has opened a small, but growing, office there (&lt;a href=&quot;https://neworbit.pl/careers/&quot;&gt;interested in joining us?&lt;/a&gt;). I look forward to attending more rg-dev meetups, though I probably need to work a bit more on my Polish :) I am consistently impressed by the developers I meet in Rzeszow and look forward to working with more of them.&lt;/p&gt;

&lt;p&gt;The slides from the talk can be downloaded in &lt;a href=&quot;https://github.com/flytzen/SecurityTalk/blob/master/Secure%20Your%20Web%20App%20Presentation.pptx?raw=true&quot;&gt;PowerPoint format from GitHub&lt;/a&gt; or you can see them (without animations) on Slideshare below:&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/vZ12nwRamiEwrr&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The talk covers the things you can do to secure web apps and APIs hosted in Azure Web Apps and Functions.&lt;/p&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;
&lt;div style=&quot;width: 480px; height: 360px; margin: 10px; position: relative;float:right;&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; style=&quot;width:480px; height:360px&quot; src=&quot;https://www.lucidchart.com/documents/embeddedchart/f4062454-7eb7-4e7a-abca-2d244417011b&quot; id=&quot;Gf4kpeh9VZr3&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h3 id=&quot;concepts&quot;&gt;Concepts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Understand your exposure; how much at risk are you and how much work should you do to secure your app?&lt;/li&gt;
  &lt;li&gt;Understand that you are probably more at risk from internal actors making mistakes with data than you are from external hackers.&lt;/li&gt;
  &lt;li&gt;You should think about your security at three levels;
    &lt;ul&gt;
      &lt;li&gt;How to &lt;em&gt;prevent&lt;/em&gt; someone from getting in&lt;/li&gt;
      &lt;li&gt;How to &lt;em&gt;detect&lt;/em&gt; that someone is attacking you&lt;/li&gt;
      &lt;li&gt;How to &lt;em&gt;mitigate&lt;/em&gt; the attack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-in&quot;&gt;Getting in&lt;/h3&gt;
&lt;p&gt;Azure Web Apps and Functions are already protected by a Firewall. It is impractical, if not impossible, to add your own firewall unless you use an App Service Environment. If you must, you can add a WAF and lock down the access to your web app to only the IP address of the WAF.&lt;br /&gt;
SSL Certificates in Azure are harder than they should be, the talk covers a few different options and their pros and cons.&lt;/p&gt;

&lt;p&gt;I strongly encourage you to use Azure ADB2C (and/or Azure AD) for authentication instead of having your own usernames and passwords.&lt;/p&gt;

&lt;h3 id=&quot;secret-management&quot;&gt;Secret Management&lt;/h3&gt;
&lt;p&gt;One of the biggest problem with both security and auditing is that the application needs passwords to access certain services; Those passwords need to be stored somewhere, which usually means they are exposed to various people. This leads to auditing and security issues.&lt;/p&gt;

&lt;p&gt;With Azure Key Vault and Managed Identity it is surprisingly easy to eliminate this problem; there is a lot to learn before you can do it - but the actual implementation is really easy.&lt;/p&gt;

&lt;h3 id=&quot;network-isolation&quot;&gt;Network Isolation&lt;/h3&gt;
&lt;p&gt;By default, all your back-end services such as Cosmos, SQL, storage and so on are open to other services running in Azure and some are open to the Internet. It is surprisingly easy to set up a private Virtual Network and set your back-end services so they can only be accessed from that virtual network - and then allow your web app to talk to that network. You can even set up micro-services hosted in Azure Web Apps or Functions in this way, completely blocking access from anything other than your web app.&lt;/p&gt;

&lt;p&gt;The main challenge with the virtual networks is that 90% of the documentation on them has to do with features that are irrelevant when you are using Web Apps instead of VMs or Cloud Services, so it’s mainly about knowing what to ignore.&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;
&lt;p&gt;Once the attacker is in - or the well-meaning employee is accessing data they probably shouldn’t - it is extremely helpful that the data is encrypted. The obvious at-rest and transport encryption is there by default, but you can use Always Encrypted and Client-side encryption to easily encrypt data at the application level.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;Detection&lt;/h3&gt;
&lt;p&gt;One of the most overlooked areas of security is detecting when someone is attacking you. If you don’t know someone is trying to hack you or that some well-meaning employee is accessing data they shouldn’t, you can’t do anything about it.
Azure has a rich set of features to help alert you when something isn’t right. In the talk I focus on Application Insights, Threat Protection and Advanced Data Security.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Azure" /><summary type="html">I did a talk on &quot;How to secure your web-app in Azure&quot; at rg-dev</summary></entry><entry><title type="html">Find SELECT N+1 with Application Insights</title><link href="https://www.lytzen.name/2019/05/20/find-select-nplus1-with-app-insights.html" rel="alternate" type="text/html" title="Find SELECT N+1 with Application Insights" /><published>2019-05-20T00:00:00+01:00</published><updated>2019-05-20T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/05/20/find-select-nplus1-with-app-insights</id><content type="html" xml:base="https://www.lytzen.name/2019/05/20/find-select-nplus1-with-app-insights.html">&lt;p&gt;ORMs like Entity Framework are good for many things - but they also make it easy to write “SELECT N+1 queries”. This is when you thought you just did one SQL call but you make one call to retrieve the list of records and then (at least) one more call for each row in the resultset, because you loop over the data and inadvertently auto-expand a property. You rarely spot it in development and even in production it is sometimes hard to see; It may well be that a particular operation causes your code to call SQL 500 times, but that may take less than a second so the operation may not even show up at the top of your “performance offenders” list. But, it’s still a lot of traffic to send to SQL and, combined with the fact that SELECT N+1 problems are usually very easy to fix, it’s worthwhile hunting them down and sorting them out.&lt;/p&gt;

&lt;p&gt;By default Application Insights log every Request made to your web/api server and log every &lt;em&gt;dependency call&lt;/em&gt;, such as database and micro service call you do. It connects the two together by giving the dependency call a &lt;code class=&quot;highlighter-rouge&quot;&gt;operation_ParentId&lt;/code&gt; that is the same as the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; of the request.
In short, you can join the &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; to list each web/api request and show how many SQL calls it generated and how long they took to run in aggregate like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;requests 
| project name, id, duration
| join kind = leftouter (
   dependencies 
   | where type  == 'SQL'
   | project sqlid = id, operation_ParentId , sqlduration = duration 
) on $left.id == $right.operation_ParentId 
| summarize sqlopscount = countif(isnotempty(sqlid)), sqlopsduration = sum(sqlduration) by name, id, duration
| order by sqlopscount  desc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that this query will show each individual request made. You may want to roll that up further to see the &lt;em&gt;type&lt;/em&gt; of call - but I find that quite often it is helpful to know the exact call to make it easier to reproduce it.&lt;br /&gt;
I am currently working through a legacy app that has a lot of these kind of problems; I look at the result of this query and then set to work fixing them. It’s a very easy way to find major causes of stress on the database.&lt;/p&gt;

&lt;h3 id=&quot;cosmosdb&quot;&gt;CosmosDb&lt;/h3&gt;
&lt;p&gt;You can use the same query, just change &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; to “Azure DocumentDB”.&lt;/p&gt;

&lt;h3 id=&quot;what-about-other-dependencies---or-if-my-sql-calls-are-not-logged&quot;&gt;What about other dependencies - or if my SQL calls are not logged?&lt;/h3&gt;
&lt;p&gt;When running ASP.Net (Core or otherwise) on Azure Web Apps, your SQL calls are automatically logged as dependencies. In other scenarios, this may not happen automatically. You may need to install certain extensions to pick them up - or you may have to write your own. Incidentally, writing your own can also be very helpful if you want to do the same statistics for something other than SQL.&lt;br /&gt;
In short, you can write code to wrap dependency operations in calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;TelemetryClient.StartOperation&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TelemetryClient.StopOperation&lt;/code&gt; - see the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-monitor/app/custom-operations-tracking&quot;&gt;Telemetry Client documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Azure" /><summary type="html">With ORMs it's very easy to write code that calls SQL many times to serve a single web requests, and it can be hard to find it. Application Insights can help.</summary></entry><entry><title type="html">Everything I thought I knew about Async in C# was wrong</title><link href="https://www.lytzen.name/2019/04/29/Everything-I-thought-I-knew-about-async-was-wrong.html" rel="alternate" type="text/html" title="Everything I thought I knew about Async in C# was wrong" /><published>2019-04-29T00:00:00+01:00</published><updated>2019-04-29T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/04/29/Everything-I-thought-I-knew-about-async-was-wrong</id><content type="html" xml:base="https://www.lytzen.name/2019/04/29/Everything-I-thought-I-knew-about-async-was-wrong.html">&lt;p&gt;When I first agreed to do a &lt;a href=&quot;/talks/csharp_async_deep_dive&quot;&gt;talk&lt;/a&gt; about how Async in C# really works, I thought I was an expert. I had written lots of high-throughput, high-performance async code so it should be really easy to write this talk.&lt;/p&gt;

&lt;p&gt;As soon as I began writing the code to prove the things I knew - it turned out that I knew nothing at all and all my assumptions were wrong. The result was a much better talk where I describe the fundamentals of how Async in C# works and explain a lot of the misconceptions people, such as myself, have. So far I have delivered the talk to my colleagues at work, at &lt;a href=&quot;https://www.meetup.com/dotnetoxford/&quot;&gt;Dotnet Oxford&lt;/a&gt; and at &lt;a href=&quot;https://dddsouthwest.com/&quot;&gt;DDD South West&lt;/a&gt; - thanks for having me!&lt;/p&gt;

&lt;p&gt;The presentation and the code samples &lt;a href=&quot;https://github.com/flytzen/Async.Presentation&quot;&gt;are on GitHub&lt;/a&gt; and I have also recorded it as a video. For practical reasons, the video was recorded in five parts; you can see them all &lt;a href=&quot;https://www.youtube.com/watch?v=UzVMzBEpuJg&amp;amp;list=PLbwbf2ZiIT4N7G08GcCd1Z64N8tfgKfIn&quot;&gt;in one playlist&lt;/a&gt; or see the individual parts below.&lt;/p&gt;

&lt;h2 id=&quot;part-1---introduction&quot;&gt;Part 1 - Introduction&lt;/h2&gt;
&lt;p&gt;There are lots of reasons to use async - some of them are true, others are not. In the introduction we have a quick look at these.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UzVMzBEpuJg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;part-2---brain-teasers&quot;&gt;Part 2 - Brain Teasers&lt;/h2&gt;
&lt;p&gt;A quick run through some code examples that may give you different results than you expect. It sets the stage for the next video about how it works.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/s4cvgyZ0kUM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;part-3---how-it-works&quot;&gt;Part 3 - How it works&lt;/h2&gt;
&lt;p&gt;The meat of the presentation and by far the longest video at nearly 20 minutes. It goes into detail about what really happens when you run async code and explains where threads come into play.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RBFJoPbbvTk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;part-4---deadlocks&quot;&gt;Part 4 - Deadlocks&lt;/h2&gt;
&lt;p&gt;If you work with ASP.Net “old” (i.e. not Core) or you write Desktop apps then you have probably heard that using &lt;code class=&quot;highlighter-rouge&quot;&gt;.Wait&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.Result&lt;/code&gt; can result in deadlocks. And you may have experienced that some code will only deadlock sometimes. This video builds on part 3 to explain why the deadlocks occur. It does primarily focus on ASP.Net.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/eRuGnEAya8M&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;part-5---tips&quot;&gt;Part 5 - Tips&lt;/h2&gt;
&lt;p&gt;To sum up I have collected some tips that you can use, including some on how to utilise Async to easily parallelise network writes and other async work in a way that can speed up the throughput of your code very substantially. After the last time I gave this talk, &lt;a href=&quot;https://twitter.com/tjrobinson&quot;&gt;Tom Robinson&lt;/a&gt; kindly pointed me to &lt;a href=&quot;https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md#prefer-asyncawait-over-directly-returning-task&quot;&gt;these comments&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/davidfowl&quot;&gt;David Fowler&lt;/a&gt; which put a bit more nuance around my tip to “just return the task”; consider your circumstances and make the choices that are right for you.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UtF_0gfZ48Y&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Frans Lytzen</name></author><category term="C#" /><summary type="html">The way Async is being described, it sounds like it will make your code faster and more scalable, whilst solving all your problems and achieving world peace - all before lunch. Async certainly can help you do more I/O in parallel and may in some circumstances help you scale. But did you know Async code can sometimes also use more memory, make your code slower and can introduce subtle bugs that may only appear in production?</summary></entry><entry><title type="html">Add new user to all my Azure subscriptions</title><link href="https://www.lytzen.name/2019/04/11/add-user-to-all-azure-subs.html" rel="alternate" type="text/html" title="Add new user to all my Azure subscriptions" /><published>2019-04-11T00:00:00+01:00</published><updated>2019-04-11T00:00:00+01:00</updated><id>https://www.lytzen.name/2019/04/11/add-user-to-all-azure-subs</id><content type="html" xml:base="https://www.lytzen.name/2019/04/11/add-user-to-all-azure-subs.html">&lt;p&gt;I found myself needing to add the same user as an owner to all my Azure subscriptions. If I could ever retain Powershell syntax, I could write a clever script that would loop through all the subscriptions and do what was needed. Alas, that forever eludes me so I just opted for a few Azure CLI commands with a bit of editing in an editor. Still much faster than going throgh the UI repeatedly.&lt;/p&gt;

&lt;h2 id=&quot;multiple-tenants&quot;&gt;Multiple tenants&lt;/h2&gt;
&lt;p&gt;For most people, this doesn’t apply so feel free to skip this section if it is irrelevant.&lt;br /&gt;
When you log in with Azure CLI, you can &lt;em&gt;see&lt;/em&gt; all your subscriptions across tenants - but the command to add a user to a subscription only works for the tenant you are currently “logged in to”. It can be confusing.&lt;br /&gt;
To see the tenant IDs for all your subscriptions you can run this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; az account list --query &quot;[].{tenantId:tenantId, name:name} | sort_by([],&amp;amp;tenantId)&quot;  --output table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to “login” to a specific tenant you need to :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az login --tenant &amp;lt;tenant id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then do the stuff below for each tenant id&lt;/p&gt;

&lt;h2 id=&quot;getting-the-list-of-subscription-ids&quot;&gt;Getting the list of subscription IDs&lt;/h2&gt;
&lt;p&gt;First, get the list of subscription ids for a given tenant id:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az account list --query &quot;[] | [?tenantId == 'foo.onmicrosoft.com'].id&quot; --output table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the tenant id may be in this form or may be a guid - not sure why.&lt;br /&gt;
Alternatively, if you only have a single tenant, just do:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az account list --query &quot;[].id&quot; --output table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-the-user-to-all-the-subscriptions&quot;&gt;Add the user to all the subscriptions&lt;/h2&gt;

&lt;p&gt;Copy the list of subscription IDs into a text editor and modify each line to look like this (111… being the subscription id):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az role assignment create --role &quot;Owner&quot; --assignee foo@bar.com --scope /subscriptions/11111111-1111-1111-1111-111111111111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy those lines into your console and shortly after your new user will be an owner of all your subscriptions.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="DevOps" /><category term="Azure" /><summary type="html">Add a new user to all my Azure subscriptions using Azure CLI</summary></entry><entry><title type="html">Publish Nuget packages with Azure Dev Ops</title><link href="https://www.lytzen.name/2018/10/03/publish-nuget-packages-with-azure-devops.html" rel="alternate" type="text/html" title="Publish Nuget packages with Azure Dev Ops" /><published>2018-10-03T00:00:00+01:00</published><updated>2018-10-03T00:00:00+01:00</updated><id>https://www.lytzen.name/2018/10/03/publish-nuget-packages-with-azure-devops</id><content type="html" xml:base="https://www.lytzen.name/2018/10/03/publish-nuget-packages-with-azure-devops.html">&lt;p&gt;Whenever I decide to create a Nuget package, whether for OSS or to publish on our internal MyGet feed I end up spending an inordinate amount of time trying to figure out a flow that works for testing and publishing. I guess it’s one of those things that, once you have figured it out, becomes easy but it has eluded me until recently.&lt;/p&gt;

&lt;p&gt;My requirements are quite specific and may not be to everyone’s liking;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to use &lt;a href=&quot;https://datasift.github.io/gitflow/IntroducingGitFlow.html&quot;&gt;GitFlow&lt;/a&gt; to control my branches, including using Pull Requests etc.&lt;/li&gt;
  &lt;li&gt;Whenever a commit is made to &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; (or a PR is merged in), I want to publish that package with a “&lt;code class=&quot;highlighter-rouge&quot;&gt;-pre.123&lt;/code&gt;” suffix as per &lt;a href=&quot;https://semver.org/&quot;&gt;SemVer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Whenever the same happens to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; I want to publish a “full” release.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t explicitly covered it here, but it would also be nice to have packages sat in a &lt;code class=&quot;highlighter-rouge&quot;&gt;release/*&lt;/code&gt; branch be published with a &lt;code class=&quot;highlighter-rouge&quot;&gt;-beta.1&lt;/code&gt; suffix - but you can easily extend it to cover that scenario as well.&lt;/p&gt;

&lt;p&gt;In this post I will show how to set up GitHub with Azure DevOps to do this for us.&lt;/p&gt;

&lt;p&gt;I am basing this on “modern” (i.e. 2017) csproj files, the ones where the package references are in the .csproj files. This came in with .Net Core but works fine with Full Framework projects.&lt;/p&gt;

&lt;h2 id=&quot;version-numbers&quot;&gt;Version numbers&lt;/h2&gt;
&lt;p&gt;When you create and publish Nuget packages you can specify the version number you want to use on the command line and there is ample of documentation about how to do that with Azure DevOps and other builder services, including MyGet build services, which I used previously.&lt;br /&gt;
However, I really like more control so I like to control the version number in my .csproj file - but I want the build service to automatically append &lt;code class=&quot;highlighter-rouge&quot;&gt;-pre.nnn&lt;/code&gt; when it published from the &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The first thing to understand is that there are two ways you can specify the version number in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.3-pre.987&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionPrefix&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VersionPrefix&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionSuffix&amp;gt;&lt;/span&gt;pre.987&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VersionSuffix&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both the above will create packages with version &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3-pre.987&lt;/code&gt;. The naming of the Prefix and Suffix threw me for the longest time - I thought they were meant to interact with the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Version&amp;gt;&lt;/code&gt; attribute somehow, but Prefix and Suffix is more like “main part” and “extra bit” and you should &lt;em&gt;either&lt;/em&gt; those &lt;em&gt;or&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Version&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second thing to understand is that you can use conditionals and environment variables in the attributes. 
For my purposes, this is what I ended up with:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionPrefix&amp;gt;&lt;/span&gt;1.2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VersionPrefix&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionSuffix&amp;gt;&amp;lt;/VersionSuffix&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionSuffix&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; '$(Configuration)' == 'Debug' &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;debug&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VersionSuffix&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- For local/debug builds --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;VersionSuffix&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; '$(Build_SourceBranch)' == 'refs/heads/develop' &quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;pre.$(Build_BuildID)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/VersionSuffix&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This is using variables that are specific to Azure Dev Ops Pipelines --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;VersionPrefix&amp;gt;&lt;/code&gt; here is really the proper version I want my package to have.&lt;br /&gt;
I have an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;VersionSuffix&amp;gt;&lt;/code&gt; as default. I probably don’t actually need that tag, but it helps make it clearer in my mind.&lt;/p&gt;

&lt;p&gt;The next &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;VersionSuffix&amp;gt;&lt;/code&gt; uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration&lt;/code&gt; variable that is provided by the dotnet build process; if I build in Debug mode, the package version will become &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3-debug&lt;/code&gt;. This is mainly useful for local scenarios as I will always build in Release mode for publishing.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;VersionSuffix&amp;gt;&lt;/code&gt; after that looks at an environment variable provided by Azure DevOps when you are running in the pipeline. This means that if I am building from the &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch in an Azure Pipeline then it will set the Suffix. &lt;code class=&quot;highlighter-rouge&quot;&gt;Build_BuildID&lt;/code&gt; is another environment variable provided by Azure Dev Ops to the pipeline, which will always increment. So, in the example here I may end up with a version number of &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3-pre.6239&lt;/code&gt;. As long as that last number reliably increments (which it does) you are fine for package control.&lt;br /&gt;
There is another variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;Build_BuildNumber&lt;/code&gt; which you may be tempted to use instead. However, I found some scenarios where that variable would have the name of the pipeline instead of a number, which causes the build to fail.&lt;/p&gt;

&lt;p&gt;For more advanced scenarios you can invent your own attributes, which become variables in their own right, which you can then re-combine in other ways.&lt;/p&gt;

&lt;h2 id=&quot;publish-symbols&quot;&gt;Publish Symbols&lt;/h2&gt;
&lt;p&gt;Traditionally, when you create a Nuget package, it &lt;em&gt;won’t&lt;/em&gt; include the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdb&lt;/code&gt; files (the debug symbols). In the past, the answer was to &lt;code class=&quot;highlighter-rouge&quot;&gt;--include-symbols&lt;/code&gt; when building your Nuget pacakge. This will create &lt;em&gt;two&lt;/em&gt; Nuget packages, one with the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdb&lt;/code&gt; files and one without. Up until a few years ago, you could publish both of these together to Nuget, but then that changed and now you have to publish the symbols package to a different server with a different API key and a different command. It becomes a real headache, especially because of the inconsistent and out of date documentation. Hence why I have included it in this guide; I either need to tell you how to publish symbols from within the pipeline or tell you how to avoid it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/sourcelink&quot;&gt;SourceLink&lt;/a&gt; to the rescue. SourceLink provides a way to link your package to a specific commit on, say, GitHub or elsewhere. I do recommend using SourceLink as it does so much more than just give you the PDB file - but even if you can’t or won’t, there is a gem hidden in the documentation, namely this line to add to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.csproj&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOutputExtensionsInPackageBuildOutputFolder&amp;gt;&lt;/span&gt;
  $(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOutputExtensionsInPackageBuildOutputFolder&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this will do is include the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdb&lt;/code&gt; file in your main Nuget package, meaning you don’t need a separate symbols package at all. Of course, using the full SourceLink is much better. Incidentally, this also works for private repos without sharing the source publicly.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;
&lt;p&gt;When you are looking at the documentation for Azure DevOps there are lists of variables scattered in different places. You will probably also find that the same variable in some context is referred to as Build.BuildId and in another as BUILD_BUILDID etc. Sometimes you have to reference it as %BUILD_BUILDID%, other times as $(Build.BuildId) and yet other times as $(Build_BuildID). It does sort of make sense, but as a good starting point, when designing your YAML file, I recommend adding this task somewhere:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;set&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;show variables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It just dumps all the environment variables to the log, so you can have a look through to see what is actually available for you to reference.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-pipeline&quot;&gt;Setting up a pipeline.&lt;/h2&gt;
&lt;p&gt;The easiest way to set up a build pipeline on Azure DevOps from GitHub is to add the &lt;a href=&quot;https://github.com/marketplace/azure-pipelines&quot;&gt;Azure Pipelines&lt;/a&gt; GitHub App to your Github account. When you connect it to a repository, it will walk you through setting up a default pipeline; just choose the “empty” option. This pipeline will save a YAML file into your repository and will set up two triggers. One is a simple trigger to run the pipeline for any commit on any branch, the other is a specific integration into Pull Requests; essentially any pull request will be run through the pipeline and if it fails it will block the PR from being merged.&lt;/p&gt;

&lt;p&gt;This is the YAML file I ended up:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This only runs for master and develop. Plus a seperate trigger is run for PR validation. This means commits to branches not in a PR won't get tested. Choices, choices...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NewOrbit.NewOrbit.AddOne - build and test&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;buildConfiguration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vmImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;vs2017-win2016'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;set&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;show variables&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet restore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet restore&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet build --configuration $(buildConfiguration) --no-restore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DotNetCoreCLI@2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**/*tests/*.csproj'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--configuration&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(buildConfiguration)'&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dotnet pack --configuration $(buildConfiguration) --no-build --output %Build_ArtifactStagingDirectory%&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'),eq(variables['Build.SourceBranchName'], 'develop')))&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pack&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NuGetCommand@2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;publish&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'),eq(variables['Build.SourceBranchName'], 'develop')))&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nuGetFeedType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;publishFeedCredentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NewOrbit&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MyGet&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Nuget'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packagesToPush&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(Build.ArtifactStagingDirectory)/**/*.nupkg'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; part limits this to only run on checkins to &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; (note, some of the documentation has a more verbose syntax that seems to not work). The Pull Request trigger still works so all Pull Request and all commits into an open Pull Request will be run through this pipeline. But, for me, I don’t need CI to run on every commit on every feature branch. That’s just me - if you want the pipeline to run for every commit, just delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;trigger&lt;/code&gt; section altogether.&lt;/p&gt;

&lt;p&gt;The steps through restore and build should be obvious. The step after that uses a special Azure DevOps task to run the unit tests, which ensures that the results are reported in a nice way in the pipeline.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;script: dotnet pack&lt;/code&gt; packs the Nuget package and outputs the package to a particular holding area. To be honest, I could probably forgo the &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; parameter but it helps to understand what is going on.&lt;br /&gt;
The key thing here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; line. This will ensure that a Nuget package is &lt;em&gt;only&lt;/em&gt; created if the build is of either the develop or the master branch. If you wanted to publish “beta” versions from &lt;code class=&quot;highlighter-rouge&quot;&gt;release/*&lt;/code&gt; branches, it should be straight forward to extend the condition accordingly.&lt;br /&gt;
Incidentally, there is an Azure DevOps task for creating the Nuget package but I couldn’t get it to work so used &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet pack&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;The final task publishes the created nuget package to Nuget. In this case I am publishing it to Myget; In order to do this, you first need to go to your &lt;em&gt;project&lt;/em&gt; in Azure DevOps, go to Project Settings and then select Service Connections (it’s well hidden). Then add a connection to Nuget or MyGet or whatever Nuget feed you want to publish to. You put the &lt;em&gt;name&lt;/em&gt; of that service connection in the &lt;code class=&quot;highlighter-rouge&quot;&gt;publishFeedCredentials&lt;/code&gt; property in the YAML file.&lt;/p&gt;

&lt;p&gt;if you wanted to publish packages from your develop branch to MyGet and the ones from Master to NuGet you can hopefully see how you can just duplicate the last task and change the &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; statements to suit your needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; There is a bug in Azure DevOps that may result in an error saying something like that your pipeline doesn’t have the right permissiom to use the service connection. It’s easy to fix by following the guidance &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=vsts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;approvals&quot;&gt;Approvals&lt;/h2&gt;
&lt;p&gt;The approach described above will publish packages immediately. If you wanted, you can easily set it up so you have to manually approve the publish. In short, you need to replace the final publish task in the YAML above with a Publish Artifacts task.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PublishBuildArtifacts@1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;artifactName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;package'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will copy whatever is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;%Build_ArtifactStagingDirectory%&lt;/code&gt; directory (where we put the Nuget package before) and make it available as an artefact of the build. Once you run the pipeline, look at the build and you will see an Artefact. If you click on that, Azure DevOps will take you through a wizard to set up a release pipeline, which you can then use to add manual approval before you publish the package to Nuget.&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="DevOps" /><category term="Azure" /><summary type="html">Use GitFlow and Azure Devops to automatically publish Nuget packages with sensible version numbers</summary></entry><entry><title type="html">Hierarchy IDs for Fun and Performance</title><link href="https://www.lytzen.name/2018/06/27/hierarchyid-for-fun-and-performance.html" rel="alternate" type="text/html" title="Hierarchy IDs for Fun and Performance" /><published>2018-06-27T00:00:00+01:00</published><updated>2018-06-27T00:00:00+01:00</updated><id>https://www.lytzen.name/2018/06/27/hierarchyid-for-fun-and-performance</id><content type="html" xml:base="https://www.lytzen.name/2018/06/27/hierarchyid-for-fun-and-performance.html">&lt;p&gt;Many systems have a &lt;em&gt;hierarchy&lt;/em&gt; in the data. This may be an organisation hierarchy, or maybe a hierarchy caused by a multi-tenant system or a combination thereof.&lt;br /&gt;
It’s relatively easy to model a hierarchy in a relational or document database - it is much harder to effectively filter which part of the tree a given user can see or act on. You may find yourself traversing up or down the tree or making multi-table joins.&lt;br /&gt;
A simpler solution is to use a Hierarchy ID. In a relational database, you would implement this as a string field with a delimiter-separated list of its parents, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;120/23/47/19&lt;/code&gt;. If a user is allowed to see everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;120/23&lt;/code&gt; downwards, you can easily search for all the records where the Hierarchy ID starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;120/23&lt;/code&gt; (indexes will work well with that). In document databases it ma be more optimal to have an array of all the Ancestor IDs instead of a string value.&lt;/p&gt;

&lt;p&gt;This post explores the use of Hierarchy IDs to make filtering easy and performant. In addition, it has some pointers about how to set up hierarchical configuration using the same Hierarchy ID you are implementing anyway. Of course, you could just use a graph database and then it’s a different story altogether.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;/h1&gt;

&lt;p&gt;A multi-tenant hierarchy may look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.lytzen.name/assets/fixedhierarchy.png&quot; alt=&quot;Fixed Hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll call this is a &lt;em&gt;fixed&lt;/em&gt; hierarchy as it has a fixed depth and different types at different levels.&lt;/p&gt;

&lt;p&gt;An organisational hierarchy may look like this;
&lt;img src=&quot;https://www.lytzen.name/assets/selfreferrentialhierarchy.png&quot; alt=&quot;Self-referential Hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll call this a &lt;em&gt;self-referential&lt;/em&gt; hierarchy as each layer in the hierarchy refers to parent/children of the same type.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://neworbit.co.uk&quot;&gt;NewOrbit&lt;/a&gt; we sometimes build multi-tenanted systems which has resellers, who have system customers, who in turn have organisational hierarchies so it can quickly become a very deep hierarchy.&lt;/p&gt;

&lt;p&gt;When you are creating your data structure, whether in a relational database such as Azure SQL or a document database such as Mongo or CosmosDb, you will typically have a Parent ID on records in the hierarchy as illustrated above. This is easy at write time and makes it relatively easy to traverse the hierarchy both up and down. 
However, when you need to get access to a only a part of the tree or indeed multiple subsets of the tree then it becomes very hard to query efficiently and performantly.&lt;/p&gt;

&lt;p&gt;As an example with the self-referential hierarchy, imagine in the illustration above that a given user is allowed to see the details of anybody who is in Bob’s hierarchy; you’d need to write a recursive function to keep drilling down the layers until there are no more subordinates. That means running many different SQL queries or using UDFs (which in turn will run a recursive function).&lt;/p&gt;

&lt;p&gt;Alternatively in the fixed hierarchy, imagine if a given user has access to see all the projects for three separate branches and they want to see a list of all tasks across all projects they have access to. Or imagine that a Reseller user has access to see all the details for all their Customers, but not for any other Customer - and they want to see a list of all Projects (okay, maybe not the best example in the world, but you get the idea). In that scenario you’d probably write some code that JOINs all the way up the hierarchy and out to various permissions tables, such as “are they in the list that can see the project or in the list that can see the branch or in the list that can see the customer or in the list that can see the reseller”. It may not be that hard to write the code, but it’s easy to end up with a 20-table &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;, which is expensive on a relational database - and impossible if you use CosmosSB which does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;In this post I am primarily focusing on how to &lt;em&gt;filter&lt;/em&gt; the data so a user can only see the data they are allowed in an efficient manner. There are other hierarchy scenarios, in particular around set based operations and there are other patterns that are better suited to those than what I am showing here. I highly recommend &lt;a href=&quot;https://www.amazon.co.uk/Hierarchies-Smarties-Kaufmann-Management-Systems/dp/0123877334&quot;&gt;Joe Celko’s Trees and Hierarchies in SQL for Smarties&lt;/a&gt; for understanding more about this. In fact, the lessons that I am expounding on in this post are based on what I learnt from that book many moons ago. Even if you use a document database, it’s still a good read to understand the patterns.&lt;/p&gt;

&lt;h1 id=&quot;how-to-store-hierarchy-ids&quot;&gt;How to store Hierarchy IDs&lt;/h1&gt;
&lt;p&gt;As discussed above, you will typically have some kind of Parent ID on each node in the hierarchy (though it’s usually called something more meaningful, such as CustomerID or ManagerID). 
The trick to efficient querying is to maintain a &lt;em&gt;Hierarchy ID&lt;/em&gt; on each record that has all the parent IDs all the way up the tree.&lt;br /&gt;
In a relational database, you would store it as a text string like this (for the Task in the fixed hierarchy example above);
&lt;code class=&quot;highlighter-rouge&quot;&gt;10/20/57/2/1047&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a Document Database you can do the same or use a slightly more efficient approach, which is to store an &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; of Ancestor IDs. If your documents use &lt;code class=&quot;highlighter-rouge&quot;&gt;GUID&lt;/code&gt;s for IDs, then you can just put all the Ancestor IDs in the array. Otherwise (and only in the fixed hierarchy) you could prefix each ID with its record type - but that starts making it too blurry in my opinion.&lt;/p&gt;

&lt;p&gt;SQL Server has a native Hierarchy ID data type that gives you a few convenience functions, but it is not mapped in Entity Framework so if you use EF you may prefer to just use a normal string.&lt;/p&gt;

&lt;h1 id=&quot;querying&quot;&gt;Querying&lt;/h1&gt;
&lt;p&gt;In order to query the database you need to be able to search on Hierarchy IDs so ensure there is an index on the field for performance. Next you need to know which Hierarchy IDs a user is allowed to see.&lt;/p&gt;

&lt;p&gt;In the case of a &lt;strong&gt;relational database&lt;/strong&gt; you have a couple of options;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If a user will only have access to a few Hierarchy IDs, then you can simply have those on listed on whatever user object (such as a ClaimsPrincipal) you are passing around in your code and you can then do some SQL along the lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT FROM xx WHERE HierarchyID LIKE &quot;123/23%&quot; OR HierarchyID LIKE &quot;516/67/43/109%&quot; &lt;/code&gt;. 
If you have many Hierarchy IDs per user then this will end up with a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt; statements which can really hurt performance, so be careful.&lt;/li&gt;
  &lt;li&gt;If a user has access to many Hierarchy IDs it may be better to maintain a Hierarchy ID table in the database, with each row having a user ID and a Hierarchy ID and then &lt;code class=&quot;highlighter-rouge&quot;&gt;INNER JOIN&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;APPLY&lt;/code&gt; to that table in your query.&lt;br /&gt;
Just be mindful that if a user is allowed two Hierarchy IDs where one is a subset of the other, you will get duplicate records so you need to either use &lt;code class=&quot;highlighter-rouge&quot;&gt;DISTINCT&lt;/code&gt; or remove such “duplicates” from the User-HierarchyID table before &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;ing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the case of a &lt;strong&gt;document database&lt;/strong&gt; that doesn’t support &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;s your only option is to keep that list of allowed Hierarchy IDs or Ancestor IDs and then use OR statements.&lt;/p&gt;

&lt;h1 id=&quot;mutability-of-the-hierarchy&quot;&gt;Mutability of the hierarchy&lt;/h1&gt;
&lt;p&gt;Some hierarchies are essentially immutable, others can change at times. For example, in the example above with customers and projects, it is exceedingly unlikely that a customer will move between resellers or a project will move between customers. In that scenario you can probably treat the Hierarchy ID as write-only and just set it once when you create the records. In the rare circumstance where you may have to change it, you can deal with that as a one-off and handle it manually.&lt;/p&gt;

&lt;p&gt;Organisation hierarchies, in particular, have an annoying habit of changing over time. If someone’s manager changes, you have to update the Hierarchy IDs all the way down the tree. Depending on the potential size of the tree and your security requirements, this may be done in different ways. Bear in mind that when the CEO of a 100,000 person company changes, that’s a lot of records to update.
In most scenarios you can just have a simple function that recurses through all the affected records and updates each one in turn. You may implement this at the database level or in application code, depending on your requirements. In a relational database you may be tempted to wrap this entire thing in a transaction, but be mindful that this may escalate to a table lock, which may effectively lock your whole system up. Alternatively, updating each record in turn may mean that for a few minutes (for a very large change) some users will see a mixture of the records they used to be able to see and the records they are going to be able to see. The user should never see records they weren’t meant to see; it may just take a few minutes to remove all the records they used to be able to see and add all the new records. 
Users may also need to re-login if you are caching their list of allowed Hierarchy IDs in a session object of some kind. Mostly, these changes are infrequent - at least changes that affect many records - so it’s usually not something to worry too much about, as long as you understand it for your system.&lt;/p&gt;

&lt;h1 id=&quot;ease-of-writing-vs-ease-of-reading&quot;&gt;Ease of Writing vs ease of Reading&lt;/h1&gt;
&lt;p&gt;When you implement a Hierarchy ID, you are making it more complex to &lt;em&gt;write&lt;/em&gt; data; Whenever you add a node in the hierarchy you now have to set it’s Hierarchy ID. If your tree is mutable, you also need to handle updating the Hierarchy IDs of all children whenever nodes are moved - something that can take considerable time and capacity if a high-level node is moved. Similarly, you may need to write code to maintain a list of “allowed hierarchy IDs” per user.  In other words, Hierarchy IDs adds extra complexity to your system.&lt;br /&gt;
On the other hand, once Hierarchy IDs are in place, your data filtering/security code becomes much easier to write and your database queries will be much more performant.&lt;/p&gt;

&lt;p&gt;Whether Hierarchy IDs are right for a given solution will, as always, depend on the needs of that system. Some of the key indicators that you may need it are;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deep hierarchies with access rights determined at multiple levels&lt;/li&gt;
  &lt;li&gt;Large data sets in a hierarchy&lt;/li&gt;
  &lt;li&gt;Self-referential hierarchies with access rights set at arbitrary levels (think pretty much any organisational hierarchy with scope-of-control security)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hierarchical-configuration&quot;&gt;Hierarchical Configuration&lt;/h1&gt;
&lt;p&gt;It is a common requirement to have Hierarchical Configuration where a certain setting is different for a certain part of the tree. For example, you may have some settings that only apply to a particular Reseller, Customer or even Branch etc.&lt;/p&gt;

&lt;p&gt;If you are already implementing Hierarchy IDs in the form of a delimited string, you could have a simple Configuration table that has the Key, the Value and the Hierarchy ID it applies to. 
When you want to find the value for a particular Hierarchy ID for a particular node, you can recursively search for a configuration setting that matches the node’s Hierarchy ID, or it’s parent or the grand parent etc, all the way up to the root. This is obviously not very efficient to query so you would need to cache it (or keep the whole thing in memory if possible), but it makes it very easy to model and extend.&lt;/p&gt;

&lt;p&gt;What you really want is something like (pseudo code)&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HierarchyID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUBSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_hierarchy_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HierarchyID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You may well be able to write a SQL statement something like that, though it will definitely use a table scan - so still cache it.&lt;/p&gt;

&lt;p&gt;In the case of document database with an array of Ancestor IDs, you’d need to ensure that the Ancestor ID array on the node is sorted by descent level so that you can look for configuration values in the right order (by walking up the tree).&lt;/p&gt;</content><author><name>Frans Lytzen</name></author><category term="Databases" /><category term="Performance" /><category term="SQL" /><category term="CosmosDB" /><summary type="html">Storing hierarchies in a database is easy - but applying hierarchical security and configuration can be very difficult and a significant performance problem. Hierarchy IDs can alleviate this, at the cost of a bit more complexity at write time.</summary></entry></feed>